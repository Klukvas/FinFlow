version: "3.9"

services:
  db:
    image: postgres:15
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init:/docker-entrypoint-initdb.d
    ports:
      - "5433:5432" 
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 2s
      timeout: 3s
      retries: 10

  redis:
    image: redis:7-alpine
    restart: always
    ports:
      - "6377:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 2s
      timeout: 3s
      retries: 10

  user_service:
    build:
      context: .
      dockerfile: ./user_service/dockerfile
    environment:
      ENV_FILE: .env.docker
      CORS_ORIGINS: "http://localhost:3000,http://localhost:5173,http://127.0.0.1:3000,http://127.0.0.1:5173"
    env_file:
      - ./user_service/.env.docker
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "8001:8000"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        labels: "service=user_service,logging=promtail"

  category_service:
    build:
      context: .
      dockerfile: ./category_service/dockerfile
    environment:
      ENV_FILE: .env.docker
      CORS_ORIGINS: "http://localhost:3000,http://localhost:5173,http://127.0.0.1:3000,http://127.0.0.1:5173"
    env_file:
      - ./category_service/.env.docker
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "8002:8000"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        labels: "service=category_service,logging=promtail"

  expense_service:
    build:
      context: .
      dockerfile: ./expense_service/dockerfile
    environment:
      CORS_ORIGINS: "http://localhost:3000,http://localhost:5173,http://127.0.0.1:3000,http://127.0.0.1:5173"
      CATEGORY_SERVICE_URL: "http://category_service:8000"
      ACCOUNT_SERVICE_URL: "http://account_service:8000"
      INTERNAL_SECRET_TOKEN: "my-secret-token"
      DATABASE_URL: "postgresql://postgres:postgres@db:5432/expense_db"
      SECRET_KEY: "your-secret-key-here"
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "8003:8000"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        labels: "service=expense_service,logging=promtail"

  income_service:
    build:
      context: .
      dockerfile: ./income_service/Dockerfile
    environment:
      CORS_ORIGINS: "http://localhost:3000,http://localhost:5173,http://127.0.0.1:3000,http://127.0.0.1:5173"
      CATEGORY_SERVICE_URL: "http://category_service:8000"
      ACCOUNT_SERVICE_URL: "http://account_service:8000"
      INTERNAL_SECRET_TOKEN: "my-secret-token"
      DATABASE_URL: "postgresql://postgres:postgres@db:5432/income_db"
      SECRET_KEY: "your-secret-key-here"
    depends_on:
      db:
        condition: service_healthy
      category_service:
        condition: service_started
      user_service:
        condition: service_started
      account_service:
        condition: service_started
    ports:
      - "8004:8000"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        labels: "service=income_service,logging=promtail"

  recurring_service:
    build:
      context: .
      dockerfile: ./recurring_service/Dockerfile
    environment:
      CORS_ORIGINS: "http://localhost:3000,http://localhost:5173,http://127.0.0.1:3000,http://127.0.0.1:5173"
      DATABASE_URL: "postgresql://postgres:postgres@db:5432/recurring_db"
      SECRET_KEY: "your-secret-key-here"
      INTERNAL_SECRET_TOKEN: "my-secret-token"
    depends_on:
      db:
        condition: service_healthy
      expense_service:
        condition: service_started
      income_service:
        condition: service_started
      category_service:
        condition: service_started
    ports:
      - "8005:8000"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        labels: "service=recurring_service,logging=promtail"

  goals_service:
    build:
      context: .
      dockerfile: ./goals_service/Dockerfile
    environment:
      CORS_ORIGINS: "http://localhost:3000,http://localhost:5173,http://127.0.0.1:3000,http://127.0.0.1:5173"
      DATABASE_URL: "postgresql://postgres:postgres@db:5432/goals_db"
      SECRET_KEY: "your-secret-key-here"
      INTERNAL_SECRET_TOKEN: "my-secret-token"
    depends_on:
      db:
        condition: service_healthy
      user_service:
        condition: service_started
    ports:
      - "8006:8000"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        labels: "service=goals_service,logging=promtail"

  pdf_parser_service:
    build:
      context: .
      dockerfile: ./pdf_parser_service/Dockerfile
    environment:
      ENV_FILE: env.docker
    env_file:
      - ./pdf_parser_service/.env.docker
    ports:
      - "8007:8000"
    volumes:
      - pdf_uploads:/app/uploads
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        labels: "service=pdf_parser_service,logging=promtail"

  debt_service:
    build:
      context: .
      dockerfile: ./debt_service/dockerfile
    environment:
      CORS_ORIGINS: "http://localhost:3000,http://localhost:5173,http://127.0.0.1:3000,http://127.0.0.1:5173"
      DATABASE_URL: "postgresql://postgres:postgres@db:5432/debt_db"
      SECRET_KEY: "your-secret-key-here"
    depends_on:
      db:
        condition: service_healthy
      category_service:
        condition: service_started
      user_service:
        condition: service_started
    ports:
      - "8008:8000"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        labels: "service=debt_service,logging=promtail"

  account_service:
    build:
      context: .
      dockerfile: ./account_service/Dockerfile
    environment:
      CORS_ORIGINS: "http://localhost:3000,http://localhost:5173,http://127.0.0.1:3000,http://127.0.0.1:5173"
      REDIS_URL: "redis://redis:6379"
      DATABASE_URL: "postgresql://postgres:postgres@db:5432/account_db"
      SECRET_KEY: "your-secret-key-here"
      INTERNAL_SECRET_TOKEN: "my-secret-token"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      user_service:
        condition: service_started
      currency_service:
        condition: service_started
    ports:
      - "8009:8000"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        labels: "service=account_service,logging=promtail"

  currency_service:
    build:
      context: .
      dockerfile: ./currency_service/Dockerfile
    environment:
      CORS_ORIGINS: "http://localhost:3000,http://localhost:5173,http://127.0.0.1:3000,http://127.0.0.1:5173"
      REDIS_URL: "redis://redis:6379"
    depends_on:
      redis:
        condition: service_healthy
    ports:
      - "8010:8000"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        labels: "service=currency_service,logging=promtail"

  # Logging Infrastructure
  loki:
    image: grafana/loki:2.9.0
    container_name: loki
    restart: unless-stopped
    ports:
      - "3100:3100"
    volumes:
      - loki_data:/loki
      - ./logging/loki-config.yml:/etc/loki/local-config.yaml:ro
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - logging
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3100/ready"]
      interval: 30s
      timeout: 10s
      retries: 3

  promtail:
    image: grafana/promtail:2.9.0
    container_name: promtail
    restart: unless-stopped
    volumes:
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./logging/promtail-config.yml:/etc/promtail/config.yml:ro
    command: -config.file=/etc/promtail/config.yml
    depends_on:
      - loki
    networks:
      - logging
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9080/ready"]
      interval: 30s
      timeout: 10s
      retries: 3

  grafana:
    image: grafana/grafana:10.1.0
    container_name: grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on:
      - loki
    networks:
      - logging
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
  redis_data:
  pdf_uploads:
  loki_data:
  grafana_data:

networks:
  logging:
    driver: bridge
