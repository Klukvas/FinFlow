name: Security Scanning

on:
  push:
    branches: [main]
  pull_request:
    branches: [main, develop]
  schedule:
    # Run weekly on Mondays at 3 AM UTC
    - cron: '0 3 * * 1'
  workflow_dispatch:

concurrency:
  group: security-${{ github.ref }}
  cancel-in-progress: true

jobs:
  dependency-scan-python:
    name: Python Dependency Scan
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service:
          - account_service
          - category_service
          - currency_service
          - debt_service
          - expense_service
          - goals_service
          - income_service
          - pdf_parser_service
          - recurring_service
          - user_service
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Safety
        run: pip install safety

      - name: Scan dependencies
        working-directory: ${{ matrix.service }}
        run: |
          if [ -f "requirements.txt" ]; then
            safety check --file=requirements.txt --output=json > safety-report.json || true
            cat safety-report.json
          fi
        continue-on-error: true

      - name: Upload scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: safety-report-${{ matrix.service }}
          path: ${{ matrix.service }}/safety-report.json
          retention-days: 30

  dependency-scan-frontend:
    name: Frontend Dependency Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Audit dependencies
        working-directory: frontend
        run: yarn audit --json > audit-report.json || true
        continue-on-error: true

      - name: Upload audit results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: yarn-audit-report
          path: frontend/audit-report.json
          retention-days: 30

  trivy-scan:
    name: Trivy Container Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'schedule'
    strategy:
      matrix:
        image:
          - frontend
          - account_service
          - category_service
          - expense_service
          - user_service
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build image
        run: |
          cd ${{ matrix.image }}
          if [ -f "Dockerfile" ]; then
            docker build -t ${{ matrix.image }}:test -f Dockerfile .
          elif [ -f "dockerfile" ]; then
            docker build -t ${{ matrix.image }}:test -f dockerfile .
          fi

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ matrix.image }}:test
          format: 'sarif'
          output: 'trivy-results-${{ matrix.image }}.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results-${{ matrix.image }}.sarif'

  codeql-analysis:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    strategy:
      fail-fast: false
      matrix:
        language: ['javascript', 'python']
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          queries: security-extended

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{ matrix.language }}"

  secret-scanning:
    name: Secret Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: TruffleHog Secrets Scan
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified

  bandit-scan:
    name: Python Security Scan (Bandit)
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service:
          - account_service
          - category_service
          - expense_service
          - user_service
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Bandit
        run: pip install bandit[toml]

      - name: Run Bandit
        working-directory: ${{ matrix.service }}
        run: |
          bandit -r app/ -f json -o bandit-report.json || true
          bandit -r app/ -f screen
        continue-on-error: true

      - name: Upload Bandit results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: bandit-report-${{ matrix.service }}
          path: ${{ matrix.service }}/bandit-report.json
          retention-days: 30

