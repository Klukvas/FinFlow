name: Database Management

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Database action to perform'
        required: true
        type: choice
        options:
          - backup
          - restore
          - migrate
          - rollback
        default: backup
      service:
        description: 'Service to perform action on (leave empty for all)'
        required: false
        type: string
      migration_version:
        description: 'Migration version (for rollback)'
        required: false
        type: string

concurrency:
  group: database-${{ inputs.action }}
  cancel-in-progress: false

jobs:
  database-action:
    name: ${{ inputs.action }} Database
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.HZ_SSH_KEY }}

      - name: Add host key
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H "${{ secrets.HZ_HOST }}" >> ~/.ssh/known_hosts

      - name: Backup Database
        if: inputs.action == 'backup'
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.HZ_USER || 'root' }}@${{ secrets.HZ_HOST }} bash -s <<'EOF'
          set -euo pipefail
          
          BACKUP_DIR="$HOME/backups/$(date +%Y%m%d_%H%M%S)"
          mkdir -p "$BACKUP_DIR"
          
          echo "Creating database backup..."
          docker exec postgres pg_dump -U ${{ secrets.DB_USER }} ${{ secrets.DB_NAME }} > "$BACKUP_DIR/backup.sql"
          
          echo "Compressing backup..."
          gzip "$BACKUP_DIR/backup.sql"
          
          echo "Backup created at: $BACKUP_DIR/backup.sql.gz"
          ls -lh "$BACKUP_DIR/"
          
          # Keep only last 7 days of backups
          find "$HOME/backups" -type d -mtime +7 -exec rm -rf {} + || true
          EOF

      - name: Run Migrations
        if: inputs.action == 'migrate'
        run: |
          SERVICES="${{ inputs.service }}"
          if [ -z "$SERVICES" ]; then
            SERVICES="account_service category_service debt_service expense_service goals_service income_service recurring_service user_service"
          fi
          
          for service in $SERVICES; do
            echo "Running migrations for $service..."
            ssh -o StrictHostKeyChecking=no ${{ secrets.HZ_USER || 'root' }}@${{ secrets.HZ_HOST }} bash -s <<EOF
            set -euo pipefail
            cd ~/app
            
            if docker compose exec -T $service test -d /app/alembic 2>/dev/null; then
              echo "Running Alembic migrations for $service..."
              docker compose exec -T $service alembic upgrade head
            else
              echo "No Alembic directory found for $service"
            fi
          EOF
          done

      - name: Rollback Migration
        if: inputs.action == 'rollback'
        run: |
          if [ -z "${{ inputs.service }}" ]; then
            echo "Service name is required for rollback"
            exit 1
          fi
          
          VERSION="${{ inputs.migration_version || '-1' }}"
          
          ssh -o StrictHostKeyChecking=no ${{ secrets.HZ_USER || 'root' }}@${{ secrets.HZ_HOST }} bash -s <<EOF
          set -euo pipefail
          cd ~/app
          
          echo "Rolling back ${{ inputs.service }} to version $VERSION..."
          docker compose exec -T ${{ inputs.service }} alembic downgrade $VERSION
          EOF

      - name: Restore Database
        if: inputs.action == 'restore'
        run: |
          echo "::warning::Database restore should be done manually to avoid data loss"
          echo "To restore a backup, SSH to the server and run:"
          echo "gunzip -c /path/to/backup.sql.gz | docker exec -i postgres psql -U ${{ secrets.DB_USER }} ${{ secrets.DB_NAME }}"

