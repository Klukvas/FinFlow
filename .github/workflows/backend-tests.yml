name: Backend Tests

on:
  pull_request:
    branches: [main, develop]
    paths:
      - '*/app/**'
      - '**/requirements.txt'
      - '**/pyproject.toml'
      - '.github/workflows/backend-tests.yml'
  push:
    branches: [main]
    paths:
      - '*/app/**'
  workflow_dispatch:

concurrency:
  group: backend-tests-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test-services:
    name: Test ${{ matrix.service }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        service:
          - account_service
          - category_service
          - currency_service
          - debt_service
          - expense_service
          - goals_service
          - income_service
          - recurring_service
          - user_service
        python-version: ['3.11']
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: test_db
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
          cache-dependency-path: ${{ matrix.service }}/requirements.txt

      - name: Install dependencies
        working-directory: ${{ matrix.service }}
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio httpx

      - name: Run tests
        working-directory: ${{ matrix.service }}
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379/0
          TESTING: true
        run: |
          if [ -d "app/tests" ]; then
            pytest app/tests -v --cov=app --cov-report=xml --cov-report=term-missing --cov-report=html
          else
            echo "No tests found for ${{ matrix.service }}, skipping..."
            exit 0
          fi

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        if: always()
        with:
          files: ${{ matrix.service }}/coverage.xml
          flags: ${{ matrix.service }}
          name: ${{ matrix.service }}-${{ matrix.python-version }}
          fail_ci_if_error: false
        continue-on-error: true

      - name: Upload coverage HTML
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-${{ matrix.service }}-${{ matrix.python-version }}
          path: ${{ matrix.service }}/htmlcov
          retention-days: 7

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: test-services
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: integration_test_db
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-asyncio httpx

      - name: Run integration tests
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/integration_test_db
          REDIS_URL: redis://localhost:6379/0
          TESTING: true
        run: |
          if [ -d "tests" ] && [ "$(ls -A tests/*.py 2>/dev/null)" ]; then
            pytest tests/ -v
          else
            echo "No integration tests found, skipping..."
          fi

