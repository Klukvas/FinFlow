name: Performance Monitoring

on:
  push:
    branches: [main]
    paths:
      - 'frontend/**'
      - '*/app/**'
  pull_request:
    branches: [main]
    paths:
      - 'frontend/**'
  schedule:
    # Run daily at 4 AM UTC
    - cron: '0 4 * * *'
  workflow_dispatch:

concurrency:
  group: performance-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lighthouse:
    name: Lighthouse Performance Audit
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.event_name == 'push'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'yarn'
          cache-dependency-path: frontend/yarn.lock

      - name: Install dependencies
        working-directory: frontend
        run: yarn install --frozen-lockfile

      - name: Build production bundle
        working-directory: frontend
        run: yarn build
        env:
          NODE_ENV: production

      - name: Serve build
        working-directory: frontend
        run: |
          npx serve -s dist -l 3000 &
          sleep 10

      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v12
        with:
          urls: |
            http://localhost:3000
          uploadArtifacts: true
          temporaryPublicStorage: true

      - name: Upload Lighthouse results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: lighthouse-results
          path: .lighthouseci
          retention-days: 30

  bundle-size:
    name: Bundle Size Analysis
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'yarn'
          cache-dependency-path: frontend/yarn.lock

      - name: Install dependencies
        working-directory: frontend
        run: yarn install --frozen-lockfile

      - name: Build and analyze bundle
        working-directory: frontend
        run: |
          yarn build
          du -sh dist/
          find dist/ -name "*.js" -exec du -h {} + | sort -h

      - name: Bundle size report
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            const distDir = path.join(process.cwd(), 'frontend', 'dist', 'assets');
            if (!fs.existsSync(distDir)) {
              console.log('No dist directory found');
              return;
            }
            
            const files = fs.readdirSync(distDir);
            const jsFiles = files.filter(f => f.endsWith('.js'));
            const cssFiles = files.filter(f => f.endsWith('.css'));
            
            let report = '## Bundle Size Report\n\n';
            report += '### JavaScript Files\n\n';
            report += '| File | Size |\n| --- | --- |\n';
            
            for (const file of jsFiles) {
              const stats = fs.statSync(path.join(distDir, file));
              const sizeKB = (stats.size / 1024).toFixed(2);
              report += `| ${file} | ${sizeKB} KB |\n`;
            }
            
            report += '\n### CSS Files\n\n';
            report += '| File | Size |\n| --- | --- |\n';
            
            for (const file of cssFiles) {
              const stats = fs.statSync(path.join(distDir, file));
              const sizeKB = (stats.size / 1024).toFixed(2);
              report += `| ${file} | ${sizeKB} KB |\n`;
            }
            
            console.log(report);

  api-performance:
    name: API Performance Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install k6
        run: |
          curl https://github.com/grafana/k6/releases/download/v0.49.0/k6-v0.49.0-linux-amd64.tar.gz -L | tar xvz
          sudo mv k6-v0.49.0-linux-amd64/k6 /usr/local/bin/

      - name: Create performance test script
        run: |
          cat > perf-test.js <<'EOF'
          import http from 'k6/http';
          import { check, sleep } from 'k6';
          
          export const options = {
            stages: [
              { duration: '30s', target: 20 },
              { duration: '1m', target: 50 },
              { duration: '30s', target: 0 },
            ],
            thresholds: {
              http_req_duration: ['p(95)<500'],
              http_req_failed: ['rate<0.01'],
            },
          };
          
          export default function () {
            const BASE_URL = __ENV.API_URL || 'http://localhost';
            
            const res = http.get(`${BASE_URL}/health`);
            check(res, {
              'status is 200': (r) => r.status === 200,
              'response time < 500ms': (r) => r.timings.duration < 500,
            });
            
            sleep(1);
          }
          EOF

      - name: Run performance tests
        run: k6 run perf-test.js
        env:
          API_URL: ${{ secrets.API_URL || 'http://localhost' }}
        continue-on-error: true

  memory-profiling:
    name: Memory Profiling
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    strategy:
      matrix:
        service:
          - category_service
          - expense_service
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        working-directory: ${{ matrix.service }}
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install memory-profiler

      - name: Profile memory usage
        working-directory: ${{ matrix.service }}
        run: |
          echo "Memory profiling for ${{ matrix.service }}"
          python -m memory_profiler app/main.py || true
        continue-on-error: true

