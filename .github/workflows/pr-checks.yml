name: Pull Request Checks

on:
  pull_request:
    branches: [main, develop]
    paths:
      - 'frontend/**'
      - '*/app/**'
      - '**/requirements.txt'
      - '**/pyproject.toml'
      - '**/package.json'
      - '.github/workflows/**'

concurrency:
  group: pr-${{ github.event.pull_request.number }}
  cancel-in-progress: true

jobs:
  frontend-lint:
    name: Frontend Linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'yarn'
          cache-dependency-path: frontend/yarn.lock

      - name: Install dependencies
        working-directory: frontend
        run: yarn install --frozen-lockfile

      - name: Run ESLint
        working-directory: frontend
        run: yarn lint

      - name: Type check
        working-directory: frontend
        run: yarn tsc --noEmit

  frontend-build:
    name: Frontend Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'yarn'
          cache-dependency-path: frontend/yarn.lock

      - name: Install dependencies
        working-directory: frontend
        run: yarn install --frozen-lockfile

      - name: Build
        working-directory: frontend
        run: yarn build

  backend-lint:
    name: Backend Linting
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        service:
          - account_service
          - category_service
          - currency_service
          - debt_service
          - expense_service
          - goals_service
          - income_service
          - pdf_parser_service
          - recurring_service
          - user_service
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v6
        with:
          python-version: '3.11'

      - name: Install linting tools
        run: |
          python -m pip install --upgrade pip
          pip install ruff black mypy

      - name: Check with ruff
        working-directory: ${{ matrix.service }}
        run: ruff check app/ || true
        continue-on-error: true

      - name: Check formatting with black
        working-directory: ${{ matrix.service }}
        run: black --check app/ || true
        continue-on-error: true

      - name: Type check with mypy
        working-directory: ${{ matrix.service }}
        run: mypy app/ || true
        continue-on-error: true

  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        service:
          - category_service
          - expense_service
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v6
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: ${{ matrix.service }}/requirements.txt

      - name: Install dependencies
        working-directory: ${{ matrix.service }}
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio

      - name: Run tests
        working-directory: ${{ matrix.service }}
        run: |
          if [ -d "app/tests" ]; then
            pytest app/tests -v --cov=app --cov-report=xml
          else
            echo "No tests found for ${{ matrix.service }}"
          fi

      - name: Upload coverage
        uses: codecov/codecov-action@v4
        if: always()
        with:
          files: ${{ matrix.service }}/coverage.xml
          flags: ${{ matrix.service }}
        continue-on-error: true

  dockerfile-lint:
    name: Dockerfile Linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Lint Dockerfiles
        uses: hadolint/hadolint-action@v3.1.0
        with:
          recursive: true
          failure-threshold: warning

  pr-summary:
    name: PR Summary
    needs: [frontend-lint, frontend-build, backend-lint, backend-tests, dockerfile-lint]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Check results
        run: |
          echo "Frontend Lint: ${{ needs.frontend-lint.result }}"
          echo "Frontend Build: ${{ needs.frontend-build.result }}"
          echo "Backend Lint: ${{ needs.backend-lint.result }}"
          echo "Backend Tests: ${{ needs.backend-tests.result }}"
          echo "Dockerfile Lint: ${{ needs.dockerfile-lint.result }}"
          
          if [[ "${{ needs.frontend-lint.result }}" == "failure" ]] || \
             [[ "${{ needs.frontend-build.result }}" == "failure" ]] || \
             [[ "${{ needs.backend-tests.result }}" == "failure" ]]; then
            echo "::error::Some checks failed"
            exit 1
          fi

