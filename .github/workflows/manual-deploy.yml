name: Manual Deployment

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        type: choice
        options:
          - production
          - staging
          - development
        default: staging
      services:
        description: 'Services to deploy (space-separated, leave empty for all)'
        required: false
        type: string
        default: ''
      image_tag:
        description: 'Image tag to deploy (default: latest)'
        required: false
        type: string
        default: 'latest'
      skip_build:
        description: 'Skip building and use existing images'
        required: false
        type: boolean
        default: false
      run_migrations:
        description: 'Run database migrations'
        required: false
        type: boolean
        default: true

concurrency:
  group: deploy-${{ inputs.environment }}
  cancel-in-progress: false

env:
  REGISTRY: ${{ secrets.REGISTRY || 'docker.io' }}
  IMAGE_PREFIX: ${{ secrets.IMAGE_PREFIX || secrets.DOCKER_USERNAME || github.repository_owner }}

jobs:
  validate:
    name: Validate Deployment
    runs-on: ubuntu-latest
    steps:
      - name: Validate inputs
        run: |
          echo "Environment: ${{ inputs.environment }}"
          echo "Services: ${{ inputs.services || 'ALL' }}"
          echo "Image tag: ${{ inputs.image_tag }}"
          echo "Skip build: ${{ inputs.skip_build }}"
          echo "Run migrations: ${{ inputs.run_migrations }}"

      - name: Confirm production deployment
        if: inputs.environment == 'production'
        run: |
          echo "::warning::Deploying to PRODUCTION environment"
          echo "Please ensure all tests have passed and changes are reviewed"

  build-images:
    name: Build and Push Images
    needs: validate
    if: inputs.skip_build == false
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Determine services
        id: services
        run: |
          if [ -z "${{ inputs.services }}" ]; then
            SERVICES="frontend account_service category_service currency_service debt_service expense_service goals_service income_service pdf_parser_service recurring_service user_service"
          else
            SERVICES="${{ inputs.services }}"
          fi
          echo "list=$SERVICES" >> $GITHUB_OUTPUT
          echo "Services to build: $SERVICES"

      - name: Build and push
        uses: ./.github/actions/build-push
        with:
          registry: ${{ env.REGISTRY }}
          docker-username: ${{ secrets.DOCKER_USERNAME }}
          docker-password: ${{ secrets.DOCKER_PASSWORD }}
          services: ${{ steps.services.outputs.list }}
          platform: linux/amd64

  run-migrations:
    name: Run Database Migrations
    needs: [validate, build-images]
    if: inputs.run_migrations == true && (inputs.skip_build == false || needs.build-images.result == 'success' || needs.build-images.result == 'skipped')
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service:
          - account_service
          - category_service
          - debt_service
          - expense_service
          - goals_service
          - income_service
          - recurring_service
          - user_service
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.HZ_SSH_KEY }}

      - name: Add host key
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H "${{ secrets.HZ_HOST }}" >> ~/.ssh/known_hosts

      - name: Run migrations via SSH
        run: |
          SERVICE="${{ matrix.service }}"
          echo "Running migrations for $SERVICE..."
          
          ssh -o StrictHostKeyChecking=no ${{ secrets.HZ_USER || 'root' }}@${{ secrets.HZ_HOST }} bash -s <<'EOF'
          set -euo pipefail
          cd ~/app
          
          # Check if service has alembic
          if docker compose exec -T $SERVICE test -d /app/alembic 2>/dev/null; then
            echo "Running Alembic migrations for $SERVICE..."
            docker compose exec -T $SERVICE alembic upgrade head || echo "Migration failed or not applicable"
          else
            echo "No Alembic directory found for $SERVICE, skipping..."
          fi
          EOF
        continue-on-error: true

  deploy:
    name: Deploy to ${{ inputs.environment }}
    needs: [validate, build-images, run-migrations]
    if: always() && needs.validate.result == 'success'
    runs-on: ubuntu-latest
    environment:
      name: ${{ inputs.environment }}
      url: ${{ steps.deploy.outputs.url }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Determine services
        id: services
        run: |
          if [ -z "${{ inputs.services }}" ]; then
            SERVICES="frontend account_service category_service currency_service debt_service expense_service goals_service income_service pdf_parser_service recurring_service user_service"
          else
            SERVICES="${{ inputs.services }}"
          fi
          echo "list=$SERVICES" >> $GITHUB_OUTPUT
          echo "Services to deploy: $SERVICES"

      - name: Deploy services
        id: deploy
        uses: ./.github/actions/deploy
        with:
          host: ${{ secrets.HZ_HOST }}
          user: ${{ secrets.HZ_USER || 'root' }}
          ssh-private-key: ${{ secrets.HZ_SSH_KEY }}
          registry: ${{ env.REGISTRY }}
          image-prefix: ${{ env.IMAGE_PREFIX }}
          db-host: ${{ secrets.DB_HOST }}
          db-port: ${{ secrets.DB_PORT || '5432' }}
          db-name: ${{ secrets.DB_NAME }}
          db-user: ${{ secrets.DB_USER }}
          db-password: ${{ secrets.DB_PASSWORD }}
          services: ${{ steps.services.outputs.list }}

      - name: Health check
        run: |
          echo "Waiting for services to start..."
          sleep 30
          
          # Check if frontend is accessible
          if curl -f -s -o /dev/null http://${{ secrets.HZ_HOST }}; then
            echo "✅ Frontend is accessible"
          else
            echo "⚠️ Frontend is not accessible"
          fi

      - name: Deployment summary
        if: always()
        run: |
          echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: ${{ inputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Services**: ${{ steps.services.outputs.list }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Image tag**: ${{ inputs.image_tag }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Migrations**: ${{ inputs.run_migrations }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY

  rollback:
    name: Rollback on Failure
    needs: [deploy]
    if: failure() && inputs.environment == 'production'
    runs-on: ubuntu-latest
    steps:
      - name: Notify rollback needed
        run: |
          echo "::error::Deployment to production failed. Manual rollback may be required."
          echo "Previous version should still be available via docker image tags"

      - name: Create incident issue
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `🚨 Production Deployment Failed - ${new Date().toISOString()}`,
              body: `
              ## Deployment Failure
              
              **Environment**: production
              **Services**: ${{ inputs.services || 'ALL' }}
              **Workflow**: [${context.runId}](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})
              
              Manual intervention may be required to rollback or fix the deployment.
              `,
              labels: ['incident', 'deployment', 'production']
            })

