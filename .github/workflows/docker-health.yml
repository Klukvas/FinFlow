name: Docker Health Check

on:
  schedule:
    # Run every 6 hours
    - cron: '0 */6 * * *'
  workflow_dispatch:

jobs:
  health-check:
    name: Check Service Health
    runs-on: ubuntu-latest
    steps:
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.HZ_SSH_KEY }}

      - name: Add host key
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H "${{ secrets.HZ_HOST }}" >> ~/.ssh/known_hosts

      - name: Check Docker services
        id: health
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.HZ_USER || 'root' }}@${{ secrets.HZ_HOST }} bash -s <<'EOF'
          set -euo pipefail
          cd ~/app
          
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "🏥 Docker Services Health Check"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo ""
          
          # Check running containers
          echo "📦 Running Containers:"
          docker compose ps
          echo ""
          
          # Check container health
          echo "🔍 Container Health Status:"
          docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
          echo ""
          
          # Check disk usage
          echo "💾 Docker Disk Usage:"
          docker system df
          echo ""
          
          # Check logs for errors (last 100 lines)
          echo "📋 Recent Errors in Logs:"
          docker compose logs --tail=100 | grep -i "error\|exception\|fatal" || echo "No recent errors found"
          echo ""
          
          # Check container restart count
          echo "🔄 Container Restart Count:"
          docker ps -a --format "{{.Names}}: {{.Status}}" | grep -i "restart\|unhealthy" || echo "All containers healthy"
          echo ""
          
          # Memory usage
          echo "💾 Memory Usage:"
          docker stats --no-stream --format "table {{.Container}}\t{{.MemUsage}}\t{{.MemPerc}}"
          echo ""
          
          echo "✅ Health check completed"
          EOF

      - name: Check frontend availability
        run: |
          if curl -f -s -o /dev/null -w "%{http_code}" http://${{ secrets.HZ_HOST }}; then
            echo "✅ Frontend is accessible"
          else
            echo "❌ Frontend is not accessible"
            exit 1
          fi

      - name: Create health report
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const status = '${{ job.status }}';
            const emoji = status === 'success' ? '✅' : '❌';
            
            core.summary.addHeading(`${emoji} Health Check Report`, 2);
            core.summary.addRaw(`**Time**: ${new Date().toISOString()}`, true);
            core.summary.addRaw(`**Status**: ${status}`, true);
            core.summary.addRaw(`**Host**: ${{ secrets.HZ_HOST }}`, true);
            await core.summary.write();

      - name: Notify on failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `🚨 Health Check Failed - ${new Date().toISOString()}`,
              body: `
              ## Health Check Failure
              
              The automated health check has detected issues with the deployed services.
              
              **Time**: ${new Date().toISOString()}
              **Workflow**: [View Run](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})
              
              Please investigate the services immediately.
              `,
              labels: ['incident', 'health-check', 'automated']
            })

