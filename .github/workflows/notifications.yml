name: Deployment Notifications

on:
  workflow_run:
    workflows: ["CI/CD Pipeline", "Manual Deployment"]
    types:
      - completed
    branches: [main]

jobs:
  notify:
    name: Send Notifications
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion != 'skipped'
    steps:
      - name: Determine status emoji
        id: status
        run: |
          if [ "${{ github.event.workflow_run.conclusion }}" == "success" ]; then
            echo "emoji=✅" >> $GITHUB_OUTPUT
            echo "status=succeeded" >> $GITHUB_OUTPUT
            echo "color=success" >> $GITHUB_OUTPUT
          else
            echo "emoji=❌" >> $GITHUB_OUTPUT
            echo "status=failed" >> $GITHUB_OUTPUT
            echo "color=danger" >> $GITHUB_OUTPUT
          fi

      - name: Create deployment summary
        id: summary
        uses: actions/github-script@v7
        with:
          script: |
            const runUrl = `${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.payload.workflow_run.id}`;
            const commitUrl = `${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/commit/${context.payload.workflow_run.head_sha}`;
            
            const summary = `
            **Workflow**: ${context.payload.workflow_run.name}
            **Status**: ${context.payload.workflow_run.conclusion}
            **Branch**: ${context.payload.workflow_run.head_branch}
            **Commit**: [${context.payload.workflow_run.head_sha.substring(0, 7)}](${commitUrl})
            **Run**: [#${context.payload.workflow_run.run_number}](${runUrl})
            **Triggered by**: @${context.payload.workflow_run.triggering_actor.login}
            `;
            
            core.setOutput('summary', summary);
            return summary;

      - name: Comment on PR if applicable
        if: github.event.workflow_run.event == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const prs = await github.rest.repos.listPullRequestsAssociatedWithCommit({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: context.payload.workflow_run.head_sha
            });
            
            if (prs.data.length > 0) {
              const pr = prs.data[0];
              const comment = `
              ${{ steps.status.outputs.emoji }} Deployment **${{ steps.status.outputs.status }}**
              
              ${{ steps.summary.outputs.summary }}
              `;
              
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr.number,
                body: comment
              });
            }

      - name: Send Slack notification
        if: env.SLACK_WEBHOOK_URL != ''
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          curl -X POST $SLACK_WEBHOOK_URL \
            -H 'Content-Type: application/json' \
            -d '{
              "text": "${{ steps.status.outputs.emoji }} Deployment ${{ steps.status.outputs.status }}",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Deployment ${{ steps.status.outputs.status }}*\n${{ steps.summary.outputs.summary }}"
                  }
                }
              ]
            }' || echo "Slack notification skipped"

      - name: Send email notification
        if: github.event.workflow_run.conclusion == 'failure'
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{ secrets.MAIL_SERVER }}
          server_port: ${{ secrets.MAIL_PORT || 587 }}
          username: ${{ secrets.MAIL_USERNAME }}
          password: ${{ secrets.MAIL_PASSWORD }}
          subject: "❌ Deployment Failed: ${{ github.event.workflow_run.name }}"
          to: ${{ secrets.NOTIFICATION_EMAIL }}
          from: GitHub Actions
          body: |
            Deployment failed for workflow: ${{ github.event.workflow_run.name }}
            
            ${{ steps.summary.outputs.summary }}
            
            Please check the logs for more information.
        continue-on-error: true

  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.head_branch == 'main'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get latest tag
        id: latest_tag
        run: |
          TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "tag=$TAG" >> $GITHUB_OUTPUT

      - name: Calculate next version
        id: next_version
        run: |
          LATEST="${{ steps.latest_tag.outputs.tag }}"
          VERSION=${LATEST#v}
          IFS='.' read -ra PARTS <<< "$VERSION"
          MAJOR=${PARTS[0]}
          MINOR=${PARTS[1]}
          PATCH=${PARTS[2]}
          
          # Increment patch version
          PATCH=$((PATCH + 1))
          NEXT="v$MAJOR.$MINOR.$PATCH"
          
          echo "version=$NEXT" >> $GITHUB_OUTPUT
          echo "Next version: $NEXT"

      - name: Generate changelog
        id: changelog
        run: |
          LATEST_TAG="${{ steps.latest_tag.outputs.tag }}"
          
          CHANGELOG=$(git log $LATEST_TAG..HEAD --pretty=format:"- %s (%h)" --no-merges | head -20)
          
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: actions/github-script@v7
        with:
          script: |
            const tag = "${{ steps.next_version.outputs.version }}";
            const changelog = `${{ steps.changelog.outputs.changelog }}`;
            
            try {
              await github.rest.repos.createRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag_name: tag,
                name: `Release ${tag}`,
                body: `## Changes\n\n${changelog}\n\n---\n\nDeployed to production on ${new Date().toISOString()}`,
                draft: false,
                prerelease: false,
                target_commitish: context.sha
              });
              
              console.log(`Created release ${tag}`);
            } catch (error) {
              console.log(`Release creation skipped: ${error.message}`);
            }

