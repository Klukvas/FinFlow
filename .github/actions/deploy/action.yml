name: Deploy via SSH and Compose
description: SSH to host, write compose and env, pull images, and recreate services
inputs:
  host:
    description: Target host
    required: true
  user:
    description: SSH user
    required: true
    default: root
  ssh-private-key:
    description: SSH private key
    required: true
  registry:
    description: Registry for images
    required: true
  image-prefix:
    description: Image namespace/prefix
    required: true
  db-host:
    description: Database host
    required: true
  db-port:
    description: Database port
    required: true
    default: "5432"
  db-name:
    description: Database name
    required: true
  db-user:
    description: Database user
    required: true
  db-password:
    description: Database password
    required: true
  services:
    description: Space-separated services to deploy
    required: true
    default: "frontend account_service category_service currency_service debt_service expense_service goals_service income_service pdf_parser_service recurring_service user_service"
runs:
  using: composite
  steps:
    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.9.0
      with:
        ssh-private-key: ${{ inputs.ssh-private-key }}

    - name: Add host key
      shell: bash
      run: |
        mkdir -p ~/.ssh
        ssh-keyscan -H '${{ inputs.host }}' >> ~/.ssh/known_hosts

    - name: Deploy over SSH
      shell: bash
      env:
        HOST: ${{ inputs.host }}
        USER: ${{ inputs.user }}
        REGISTRY: ${{ inputs.registry }}
        IMAGE_PREFIX: ${{ inputs.image-prefix }}
        DB_HOST: ${{ inputs.db-host }}
        DB_PORT: ${{ inputs.db-port }}
        DB_NAME: ${{ inputs.db-name }}
        DB_USER: ${{ inputs.db-user }}
        DB_PASSWORD: ${{ inputs.db-password }}
        SERVICES: ${{ inputs.services }}
      run: |
        set -euo pipefail
        ssh -o StrictHostKeyChecking=no "$USER@$HOST" bash -s <<'EOS'
          set -euo pipefail
          mkdir -p ~/app
          cd ~/app
          cat > .env << 'ENVEOF'
        REGISTRY=${REGISTRY}
        IMAGE_PREFIX=${IMAGE_PREFIX}
        DB_HOST=${DB_HOST}
        DB_PORT=${DB_PORT}
        DB_NAME=${DB_NAME}
        DB_USER=${DB_USER}
        DB_PASSWORD=${DB_PASSWORD}
        NODE_ENV=production
        ENVEOF

          cat > docker-compose.yml << 'COMPOSEEOF'

        services:
          frontend:
            image: ${REGISTRY:-docker.io}/${IMAGE_PREFIX:-yourusername}/frontend:latest
            ports:
              - "80:80"
            environment:
              - NODE_ENV=production
            restart: unless-stopped

          account_service:
            image: ${REGISTRY:-docker.io}/${IMAGE_PREFIX:-yourusername}/account_service:latest
            environment:
              - DATABASE_URL=postgresql://${DB_USER:-appuser}:${DB_PASSWORD:-password}@${DB_HOST:-localhost}:${DB_PORT:-5432}/${DB_NAME:-appdb}
              - REDIS_URL=redis://redis:6379/0
            depends_on:
              - redis
            restart: unless-stopped

          category_service:
            image: ${REGISTRY:-docker.io}/${IMAGE_PREFIX:-yourusername}/category_service:latest
            environment:
              - DATABASE_URL=postgresql://${DB_USER:-appuser}:${DB_PASSWORD:-password}@${DB_HOST:-localhost}:${DB_PORT:-5432}/${DB_NAME:-appdb}
            restart: unless-stopped

          currency_service:
            image: ${REGISTRY:-docker.io}/${IMAGE_PREFIX:-yourusername}/currency_service:latest
            restart: unless-stopped

          debt_service:
            image: ${REGISTRY:-docker.io}/${IMAGE_PREFIX:-yourusername}/debt_service:latest
            environment:
              - DATABASE_URL=postgresql://${DB_USER:-appuser}:${DB_PASSWORD:-password}@${DB_HOST:-localhost}:${DB_PORT:-5432}/${DB_NAME:-appdb}
            restart: unless-stopped

          expense_service:
            image: ${REGISTRY:-docker.io}/${IMAGE_PREFIX:-yourusername}/expense_service:latest
            environment:
              - DATABASE_URL=postgresql://${DB_USER:-appuser}:${DB_PASSWORD:-password}@${DB_HOST:-localhost}:${DB_PORT:-5432}/${DB_NAME:-appdb}
              - REDIS_URL=redis://redis:6379/0
            depends_on:
              - redis
            restart: unless-stopped

          goals_service:
            image: ${REGISTRY:-docker.io}/${IMAGE_PREFIX:-yourusername}/goals_service:latest
            environment:
              - DATABASE_URL=postgresql://${DB_USER:-appuser}:${DB_PASSWORD:-password}@${DB_HOST:-localhost}:${DB_PORT:-5432}/${DB_NAME:-appdb}
            restart: unless-stopped

          income_service:
            image: ${REGISTRY:-docker.io}/${IMAGE_PREFIX:-yourusername}/income_service:latest
            environment:
              - DATABASE_URL=postgresql://${DB_USER:-appuser}:${DB_PASSWORD:-password}@${DB_HOST:-localhost}:${DB_PORT:-5432}/${DB_NAME:-appdb}
              - REDIS_URL=redis://redis:6379/0
            depends_on:
              - redis
            restart: unless-stopped

          pdf_parser_service:
            image: ${REGISTRY:-docker.io}/${IMAGE_PREFIX:-yourusername}/pdf_parser_service:latest
            restart: unless-stopped

          recurring_service:
            image: ${REGISTRY:-docker.io}/${IMAGE_PREFIX:-yourusername}/recurring_service:latest
            environment:
              - DATABASE_URL=postgresql://${DB_USER:-appuser}:${DB_PASSWORD:-password}@${DB_HOST:-localhost}:${DB_PORT:-5432}/${DB_NAME:-appdb}
            restart: unless-stopped

          user_service:
            image: ${REGISTRY:-docker.io}/${IMAGE_PREFIX:-yourusername}/user_service:latest
            environment:
              - DATABASE_URL=postgresql://${DB_USER:-appuser}:${DB_PASSWORD:-password}@${DB_HOST:-localhost}:${DB_PORT:-5432}/${DB_NAME:-appdb}
            restart: unless-stopped

          redis:
            image: redis:7-alpine
            restart: unless-stopped
            volumes:
              - redis_data:/data

        volumes:
          redis_data:
        COMPOSEEOF

          echo "Pulling latest images..."
          docker compose pull
          echo "Recreating services: ${SERVICES}"
          docker compose up -d ${SERVICES}
          echo "Pruning old images..."
          docker image prune -f || true
        EOS

