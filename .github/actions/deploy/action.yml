name: Deploy via SSH and Compose
description: SSH to host, write compose and env, pull images, and recreate services
inputs:
  host:
    description: Target host
    required: true
  user:
    description: SSH user
    required: true
    default: root
  ssh-private-key:
    description: SSH private key
    required: true
  registry:
    description: Registry for images
    required: true
  image-prefix:
    description: Image namespace/prefix
    required: true
  db-host:
    description: Database host
    required: true
  db-port:
    description: Database port
    required: true
    default: "5432"
  db-name:
    description: Database name
    required: true
  db-user:
    description: Database user
    required: true
  db-password:
    description: Database password
    required: true
  services:
    description: Space-separated services to deploy
    required: true
    default: "frontend account_service category_service currency_service debt_service expense_service goals_service income_service pdf_parser_service recurring_service user_service"
runs:
  using: composite
  steps:
    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.9.0
      with:
        ssh-private-key: ${{ inputs.ssh-private-key }}

    - name: Add host key
      shell: bash
      run: |
        mkdir -p ~/.ssh
        ssh-keyscan -H '${{ inputs.host }}' >> ~/.ssh/known_hosts

    - name: Deploy over SSH
      shell: bash
      env:
        HOST: ${{ inputs.host }}
        USER: ${{ inputs.user }}
        REGISTRY: ${{ inputs.registry }}
        IMAGE_PREFIX: ${{ inputs.image-prefix }}
        DB_HOST: ${{ inputs.db-host }}
        DB_PORT: ${{ inputs.db-port }}
        DB_NAME: ${{ inputs.db-name }}
        DB_USER: ${{ inputs.db-user }}
        DB_PASSWORD: ${{ inputs.db-password }}
        SERVICES: ${{ inputs.services }}
      run: |
        set -euo pipefail
        echo "Starting deployment process"
        echo "Host: $HOST"
        echo "User: $USER"
        echo "Services: $SERVICES"
        # Use default services if empty
        if [ -z "${SERVICES:-}" ]; then
          SERVICES="frontend account_service category_service currency_service debt_service expense_service goals_service income_service pdf_parser_service recurring_service user_service"
          echo "Using default services: $SERVICES"
        fi
        ssh -o StrictHostKeyChecking=no "$USER@$HOST" bash -s <<EOS
          set -euo pipefail
          mkdir -p ~/app
          cd ~/app
          cat > .env << ENVEOF
REGISTRY=
IMAGE_PREFIX=
DB_HOST=
DB_PORT=
DB_NAME=
DB_USER=
DB_PASSWORD=
NODE_ENV=production
ENVEOF

          cat > docker-compose.yml << COMPOSEEOF
services:
  frontend:
    image: 
    ports:
      - "80:80"
    environment:
      - NODE_ENV=production
    restart: unless-stopped

  account_service:
    image: 
    environment:
      - DATABASE_URL=
      - REDIS_URL=redis://redis:6379/0
    depends_on:
      - redis
    restart: unless-stopped

  category_service:
    image: 
    environment:
      - DATABASE_URL=
    restart: unless-stopped

  currency_service:
    image: 
    restart: unless-stopped

  debt_service:
    image: 
    environment:
      - DATABASE_URL=
    restart: unless-stopped

  expense_service:
    image: 
    environment:
      - DATABASE_URL=
      - REDIS_URL=redis://redis:6379/0
    depends_on:
      - redis
    restart: unless-stopped

  goals_service:
    image: 
    environment:
      - DATABASE_URL=
    restart: unless-stopped

  income_service:
    image: 
    environment:
      - DATABASE_URL=
      - REDIS_URL=redis://redis:6379/0
    depends_on:
      - redis
    restart: unless-stopped

  pdf_parser_service:
    image: 
    restart: unless-stopped

  recurring_service:
    image: 
    environment:
      - DATABASE_URL=
    restart: unless-stopped

  user_service:
    image: 
    environment:
      - DATABASE_URL=
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    restart: unless-stopped
    volumes:
      - redis_data:/data

volumes:
  redis_data:
COMPOSEEOF

          echo "Pulling latest images..."
          docker compose pull
          echo "Recreating services: ${SERVICES}"
          docker compose up -d ${SERVICES}
          echo "Pruning old images..."
          docker image prune -f || true
EOS

