name: Build and Push Images
description: Build Docker images for selected services and push to a registry
inputs:
  registry:
    description: Container registry (e.g., docker.io)
    required: true
  docker-username:
    description: Docker registry username
    required: true
  docker-password:
    description: Docker registry password/token
    required: true
  services:
    description: Space-separated services to build
    required: true
    default: "frontend account_service category_service currency_service debt_service expense_service goals_service income_service pdf_parser_service recurring_service user_service"
  platform:
    description: Target platform for buildx
    required: false
    default: linux/amd64
  frontend-dockerfile:
    description: Optional custom Dockerfile path for frontend
    required: false
    default: frontend/Dockerfile
runs:
  using: composite
  steps:
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ inputs.registry }}
        username: ${{ inputs.docker-username }}
        password: ${{ inputs.docker-password }}

    - name: Compute tags
      id: vars
      shell: bash
      run: |
        SHA=${GITHUB_SHA::7}
        echo "sha=$SHA" >> "$GITHUB_OUTPUT"
        echo "ts=$(date +%Y%m%d%H%M%S)" >> "$GITHUB_OUTPUT"

    - name: Build and push images
      shell: bash
      working-directory: ${{ github.workspace }}
      run: |
        set -euo pipefail
        echo "Starting build process for services: ${{ inputs.services }}"
        echo "Registry: ${{ inputs.registry }}"
        echo "Username: ${{ inputs.docker-username }}"
        echo "Workspace: $(pwd)"
        echo "Repo root contents:"
        ls -la || true
        
        FAILED_SERVICES=""
        SUCCESS_SERVICES=""
        
        for svc in ${{ inputs.services }}; do
          context="$svc"
          # Determine dockerfile name relative to context
          if [ -f "$context/Dockerfile" ]; then
            df="Dockerfile"
          elif [ -f "$context/dockerfile" ]; then
            df="dockerfile"
          else
            echo "⚠️ Skip $svc (no Dockerfile)"
            continue
          fi

          # Normalize paths for docker build
          context_path="./$context"
          dockerfile_path="$context_path/$df"

          # Override for frontend if a custom Dockerfile path is provided
          if [ "$svc" = "frontend" ] && [ -n "${{ inputs.frontend-dockerfile }}" ] && [ -f "${{ inputs.frontend-dockerfile }}" ]; then
            dockerfile_path="${{ inputs.frontend-dockerfile }}"
            context_path="$(dirname "${{ inputs.frontend-dockerfile }}")"
          fi

          image="${{ inputs.registry }}/${{ inputs.docker-username }}/$svc"
          tags=" \
            --tag $image:latest \
            --tag $image:${{ steps.vars.outputs.sha }} \
            --tag $image:${{ steps.vars.outputs.ts }} \
          "

          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "🏗️  Building $svc"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "Context: $context_path"
          echo "Dockerfile: $dockerfile_path"
          echo "Image: $image"
          
          if docker buildx build \
            --platform "${{ inputs.platform }}" \
            -f "$dockerfile_path" \
            $tags \
            --push \
            --progress=plain \
            --cache-from type=registry,ref=$image:latest \
            --cache-to type=inline \
            "$context_path"; then
            echo "✅ Successfully built and pushed $svc"
            SUCCESS_SERVICES="$SUCCESS_SERVICES $svc"
          else
            echo "❌ Failed to build $svc"
            FAILED_SERVICES="$FAILED_SERVICES $svc"
          fi
        done
        
        echo ""
        echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        echo "📊 Build Summary"
        echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        echo "✅ Success:$SUCCESS_SERVICES"
        echo "❌ Failed:$FAILED_SERVICES"
        
        if [ -n "$FAILED_SERVICES" ]; then
          echo "::error::Some services failed to build: $FAILED_SERVICES"
          exit 1
        fi

