name: Build and Push Images
description: Build Docker images for selected services and push to a registry
inputs:
  registry:
    description: Container registry (e.g., docker.io)
    required: true
  docker-username:
    description: Docker registry username
    required: true
  docker-password:
    description: Docker registry password/token
    required: true
  services:
    description: Space-separated services to build
    required: true
    default: "frontend account_service category_service currency_service debt_service expense_service goals_service income_service pdf_parser_service recurring_service user_service"
  platform:
    description: Target platform for buildx
    required: false
    default: linux/amd64
  frontend-dockerfile:
    description: Optional custom Dockerfile path for frontend
    required: false
    default: frontend/Dockerfile
runs:
  using: composite
  steps:
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ inputs.registry }}
        username: ${{ inputs.docker-username }}
        password: ${{ inputs.docker-password }}

    - name: Compute tags
      id: vars
      shell: bash
      run: |
        SHA=${GITHUB_SHA::7}
        echo "sha=$SHA" >> "$GITHUB_OUTPUT"
        echo "ts=$(date +%Y%m%d%H%M%S)" >> "$GITHUB_OUTPUT"

    - name: Build and push images
      shell: bash
      working-directory: ${{ github.workspace }}
      run: |
        set -euo pipefail
        echo "Starting build process for services: ${{ inputs.services }}"
        echo "Registry: ${{ inputs.registry }}"
        echo "Username: ${{ inputs.docker-username }}"
        echo "Workspace: $(pwd)"
        echo "Repo root contents:"
        ls -la || true
        for svc in ${{ inputs.services }}; do
          context="$svc"
          # Determine dockerfile name relative to context
          if [ -f "$context/Dockerfile" ]; then
            df="Dockerfile"
          elif [ -f "$context/dockerfile" ]; then
            df="dockerfile"
          else
            echo "Skip $svc (no Dockerfile)"
            continue
          fi

          # Normalize paths for docker build
          context_path="./$context"
          dockerfile_path="$context_path/$df"

          image="${{ inputs.registry }}/${{ inputs.docker-username }}/$svc"
          tags=" \
            --tag $image:latest \
            --tag $image:${{ steps.vars.outputs.sha }} \
            --tag $image:${{ steps.vars.outputs.ts }} \
          "

          echo "Building $svc using $dockerfile_path with context $context_path -> $image"
          docker buildx build \
            --platform "${{ inputs.platform }}" \
            -f "$dockerfile_path" "$context_path" \
            --push $tags
        done

